                   Polymorphism
A) Compile Time Polymorphism
       -Function overloading
        - Operator Overloading

B) Runtime Polymorphism

/* Add two point using + operator */


#include<bits/stdc++.h>
using namespace std;

class Point{
    int x,y;
    
    public:
    Point(int x=0,int y=0): x{x},y{y} {};

    Point operator+(Point &temp)
    {

        Point P1;
        P1.x=x+temp.x;
        P1.y=y+temp.y;

        return P1;
    }
    void Display()
    {
        cout<<x<<"+i"<<y<<endl;
    }


};

int main() {
    Point p1(10,30),p2(39,45);
    Point p3=p1+p2;
    p3.Display();
    return 0;
}

/* Adding two complex number*/


#include<bits/stdc++.h>
using namespace std;

class Complex{

    int real,img;

    public:
    Complex(int r=0,int img=0): real{r},img{img}{};
   
   Complex operator+(Complex const &tmp)
   {
        Complex c;
        c.real=real+tmp.real;
        c.img=img+tmp.img;
        return c;
   }
   void print()
   {
    cout<<real<<"+i"<<img<<endl;
   }

};

int main() {
    Complex c1(3,4),c2(4,5);
    Complex c3=c1+c2;

    c3.print();
    
   
    return 0;
}
/* Unary Operator overloading needs only one operand */


#include<bits/stdc++.h>
using namespace std;

class Point{
  int x,y;
  public:
  Point(int x=0,int y=0): x{x},y{y} {};

   Point operator-()
   {
      return Point(-x,-y);
   }
   void print()
   {
    cout<<"x:"<<x<<" y:"<<y<<endl;

   }

};


int main() {
    Point P1(4,5),P2;
    P2=-P1;

    P2.print();

   
    return 0;
}

/Unary operator ! */

#include<bits/stdc++.h>
using namespace std;

class Point{
  int x,y;
  public:
  Point(int x=0,int y=0): x{x},y{y} {};

   Point operator!()
   {
      return Point(!x,!y);
   }
   void print()
   {
    cout<<"x:"<<x<<" y:"<<y<<endl;

   }

};


int main() {
    Point P1(0,0),P2;
    P2=!P1;

    P2.print();

   
    return 0;
}

/*Ar  */





